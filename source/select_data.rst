选取数据
================

表1，不同变量对应索引的关键词:

+-------+------------------------------+
|key    |variable                      |
+=======+==============================+
|dBT    |total_power                   |
+-------+------------------------------+
|dBZ    |reflectivity                  |
+-------+------------------------------+
|V      |velocity                      |
+-------+------------------------------+
|W      |spectrum_width                |
+-------+------------------------------+
|SQI    |normalized_coherent_power     |
+-------+------------------------------+
|CPA    |clutter_phase_alignment       |
+-------+------------------------------+
|ZDR    |differential_reflectivity     |
+-------+------------------------------+
|LDR    |linear_depolarization_ratio   |
+-------+------------------------------+
|CC     |cross_correlation_ratio       |
+-------+------------------------------+
|PhiDP  |differential_phase            |
+-------+------------------------------+
|KDP    |specific_differential_phase   |
+-------+------------------------------+
|CP     |clutter_probability           |
+-------+------------------------------+
|Flag   |flag_of_rpv_data              |
+-------+------------------------------+
|HCL    |hydro_class                   |
+-------+------------------------------+
|CF     |clutter_flag                  |
+-------+------------------------------+
|Zc     |corrected_reflectivity        |
+-------+------------------------------+
|Vc     |corrected_velocity            |
+-------+------------------------------+
|Wc     |spectrum_width_corrected      |
+-------+------------------------------+
|SNRH   |horizontal_signal_noise_ratio |
+-------+------------------------------+
|SNRV   |vertical_signal_noise_ratio   |
+-------+------------------------------+

fields属性存放了雷达体扫数据，可通过[层数][关键词]方法索引对应产品

>>> from pycwr.io import read_auto
>>> PRD = read_auto("./data/NUIST.20150627.002438.AR2.bz2")
>>> print(PRD.fields[0]["dBZ"])
    <xarray.DataArray 'dBZ' (time: 668, range: 1933)>
    array([[-13.60000038,  17.34000015,  24.10000038, ...,  16.87999916,
             16.76000023,  17.52000046],
           [-13.60000038,  16.65999985,  24.09000015, ...,  18.37000084,
             16.42000008,  17.86000061],
           [-13.60000038,  18.03000069,  23.57999992, ...,  16.98999977,
             20.04000092,  20.85000038],
           ...,
           [-13.60000038,  12.61999989,  24.        , ...,  15.63000011,
             14.63000011,  13.81000042],
           [-13.60000038,  15.75      ,  25.35000038, ...,  12.85999966,
             17.29999924,  14.15999985],
           [-13.60000038,  14.97999954,  24.55999947, ...,  18.62000084,
             18.23999977,  19.31999969]])
    Coordinates:
        azimuth    (time) float64 9.149 9.69 10.22 10.77 ... 8.094 8.611 9.168 9.693
        elevation  (time) float64 0.5933 0.5933 0.5933 ... 0.5054 0.5054 0.5054
        x          (time, range) float64 11.92 23.85 35.77 ... 2.439e+04 2.44e+04
        y          (time, range) float64 74.04 148.1 222.1 ... 1.428e+05 1.429e+05
        z          (time, range) float64 174.8 175.6 176.3 ... 2.688e+03 2.689e+03
        lat        (time, range) float64 32.21 32.21 32.21 ... 33.49 33.49 33.49
        lon        (time, range) float64 118.7 118.7 118.7 ... 119.0 119.0 119.0
      * range      (range) float64 75.0 150.0 225.0 ... 1.448e+05 1.449e+05 1.45e+05
      * time       (time) datetime64[ns] 2015-06-27T00:24:38.640231 ... 2015-06-2...
    Attributes:
        units:          dBZ
        standard_name:  equivalent_reflectivity_factor
        long_name:      Reflectivity
        valid_max:      80.0
        valid_min:      -30.0
        coordinates:    elevation azimuth range
